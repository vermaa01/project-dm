Q1. 10M

Write a program to find the execution time taken for execution of a given set of instructions (use clock() function)

#include <time.h>
#include <stdio.h>
int main()
{
 clock_t start_t, end_t;
 double total_t;
 int i;
 start_t = clock();
 printf("Starting of the program, start_t = %ld\n", start_t);
 printf("Going to scan a big loop...\n");
 for (i = 0; i < 10000000; i++)
 {}
 end_t = clock();
 printf("End of the big loop, end_t = %ld\n", end_t);
 total_t = (double)(end_t - start_t) / CLOCKS_PER_SEC;
 printf("Total time taken by CPU: %f seconds\n", total_t);
 printf("Exiting of the program...\n");
 return 0;
}



Q2. 20M


Write the simulation program to implement demand paging and show the page scheduling and total number of page faults for the following given page reference string. Give input n=3 as the number of memory frames.

Reference String :3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6

Implement FIFO

#include <stdio.h>
#define REFERENCE_STRING_LENGTH 12
int main() 
{
 int n;
 int frames[20], ref_str[25] = {3,4,5,6,3,4,7,3,4,5,6,7,2,4,6};
 int i, j, k, page_faults = 0, next_to_replace = 0, flag;

 printf("Enter number of memory frames: ");
 scanf("%d", &n);


 for(i = 0; i < n; i++)
 frames[i] = -1;

 printf("\nPage Reference String: ");
 for(i = 0; i < REFERENCE_STRING_LENGTH; i++)
 printf("%d ", ref_str[i]);

 printf("\n\nPage Scheduling (FIFO):\n");

 for(i = 0; i < REFERENCE_STRING_LENGTH; i++) 
 {
  flag = 0;

  for(j = 0; j < n; j++) 
  {
   if(frames[j] == ref_str[i]) 
   {
    flag = 1;
    break;
   }
  }

  if(flag == 0) 
  {
   frames[next_to_replace] = ref_str[i];
   next_to_replace = (next_to_replace + 1) % n;
   page_faults++;
  }

  printf("After referencing %d: ", ref_str[i]);
  for(k = 0; k < n; k++) 
  {
   if(frames[k] == -1)
   printf(" - ");
   else
   printf(" %d ", frames[k]);
  }
  if(flag == 0)
  printf("  (Page Fault)");
  else
  printf("  (Hit)");
  printf("\n");
 }
 printf("\nTotal Page Faults = %d\n", page_faults);
 return 0;
}

