Q1. 10M

Write a C program to accept the number of process and resources and find the need matrix content and display it.

#include <stdio.h>
int main() 
{
 int n, m;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 printf("Enter the number of resources: ");
 scanf("%d", &m);
 int allocation[n][m];
 int maxMatrix[n][m];
 int need[n][m];
 printf("Enter the Allocation matrix (row-wise):\n");
 for(int i = 0; i < n; i++) 
 {
  for(int j = 0; j < m; j++) 
  {
   scanf("%d", &allocation[i][j]);
  }
 }
 printf("Enter the Max matrix (row-wise):\n");
 for(int i = 0; i < n; i++) 
 {
  for(int j = 0; j < m; j++) 
  {
   scanf("%d", &maxMatrix[i][j]);
  }
 }
 for(int i = 0; i < n; i++) 
 {
  for(int j = 0; j < m; j++) 
  {
   need[i][j] = maxMatrix[i][j] - allocation[i][j];
  }
 }
 printf("\nNeed matrix:\n");
 for(int i = 0; i < n; i++) 
 {
  for(int j = 0; j < m; j++) 
  {
   printf("%d ", need[i][j]);
  }
  printf("\n");
 }
 return 0;
}


Inputs for the output: Refer this

Enter the number of processes: 3

Enter the number of resources: 2

Enter the Allocation matrix (row-wise, 3 rows and 2 columns):
1 0
2 1
0 1

Enter the Max matrix (row-wise, 3 rows and 2 columns):
3 2
4 2
2 1


Q2. 20M

Write the simulation program to implement demand paging and show the page scheduling and total number of page faults for the following given page reference string. Give input n =3 as
the number of memory frames.

Reference String : 12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8

Implement OPT

#include<stdio.h>
int n = 16, nf;
int in[20] = {12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};
int p[50];
int hit = 0;
int i, j, k;
int pgfaultcnt = 0;

void getData()
{
 printf("\nEnter no of frames: ");
 scanf("%d", &nf);
}
void initialize()
{
 pgfaultcnt = 0;
 for(i = 0; i < nf; i++)
 p[i] = 9999;
}

int isHit(int data)
{
 hit = 0;
 for(j = 0; j < nf; j++)
 {
  if(p[j] == data)
  {
   hit = 1;
   break;
  }
 }
 return hit;
}

int getHitIndex(int data)
{
 int hitind;
 for(k = 0; k < nf; k++)
 {
  if(p[k] == data)
  {
   hitind = 5;
   break;
  }
 }
 return hitind;
}

void dispPages()
{
 for(k = 0; k < nf; k++)
 {
  if(p[k] != 9999)
  printf("%d", p[k]);
 }
}

void dispPgFaultCnt()
{
 printf("\nTotal no of page faults: %d\n",pgfaultcnt);
}

void optimal()
{
 initialize();
 int near[50];
 for(i = 0; i < n; i++)
 {
  printf("\nFor %d :",in[i]);
  if(isHit(in[i]) == 0)
  {
   for(j = 0; j < nf; j++)
   {
    int pg = p[j];
    int found = 0;
    for(k = i; k < n; k++)
    {
     if(pg == in[k])
     {
      near[j]=k;
      found=1;
      break;
     }
     else
     found = 0;
    }
    if(!found)
    near[j] = 9999;
   }
   int max = -9999;
   int repindex;
   for(j = 0; j < nf; j++)
   {
    if(near[j] > max)
    {
     max = near[j];
     repindex = j;
    }
   }
   p[repindex] = in[i];
   pgfaultcnt++;
   dispPages();
  }
  else
  printf("No page fault");
 }
 dispPgFaultCnt();
}
int main()
{
 getData();
 optimal();
}

