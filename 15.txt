Q1. 10M

Write a program to create a child process using fork().The parent should goto sleep state and child process should begin its execution. In the child process, use execl() to execute the “ls” command.

#include<stdio.h>  
#include<stdlib.h>    
#include<unistd.h> 
#include<sys/types.h>
int main() 
{
 pid_t pid = fork();
 if (pid == -1) 
 {
  perror("fork failed");
  return 1;
 } 
 else if (pid == 0) 
 {
  printf("Child process: Starting execution...\n");
  execl("/bin/ls", "ls", "-l", NULL);
  perror("execl failed"); 
  return 1;
 } 
 else 
 {
  printf("Parent process: Going to sleep for 10 seconds...\n");
  sleep(10);
  printf("Parent process: Woke up after sleep.\n");
 }
 return 0;
}


Q2. 20M

Write the simulation program to implement demand paging and show the page scheduling and total number of page faults for the following given page reference string. Give input n as the number of memory frames.

Reference String :7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2

Implement LRU

#include <stdio.h>

#define MAX 100

int reference_string[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
int ref_len = sizeof(reference_string) / sizeof(reference_string[0]);

int find_lru(int time[], int frames) {
    int min = time[0], pos = 0;
    for (int i = 1; i < frames; i++) {
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

void print_memory(int memory[], int frames) {
    for (int i = 0; i < frames; i++) {
        if (memory[i] != -1)
            printf("%d ", memory[i]);
        else
            printf("- ");
    }
    printf("\t");
}

int main() {
    int frames;

    printf("Enter number of memory frames: ");
    scanf("%d", &frames);

    int memory[frames], time[frames];
    int page_faults = 0, counter = 0;
    int i, j, flag1, flag2, pos;

    for (i = 0; i < frames; i++) {
        memory[i] = -1;
    }

    printf("\nStep\tPage\tMemory\t\tPage Fault\n");
    printf("-------------------------------------------------\n");

    for (i = 0; i < ref_len; i++) {
        flag1 = flag2 = 0;

        for (j = 0; j < frames; j++) {
            if (memory[j] == reference_string[i]) {
                counter++;
                time[j] = counter;
                flag1 = flag2 = 1;
                break;
            }
        }

        if (flag1 == 0) {
            for (j = 0; j < frames; j++) {
                if (memory[j] == -1) {
                    counter++;
                    page_faults++;
                    memory[j] = reference_string[i];
                    time[j] = counter;
                    flag2 = 1;
                    break;
                }
            }
        }


        if (flag2 == 0) {
            pos = find_lru(time, frames);
            counter++;
            page_faults++;
            memory[pos] = reference_string[i];
            time[pos] = counter;
        }

        printf("%2d\t%2d\t", i + 1, reference_string[i]);
        print_memory(memory, frames);
        if (flag1 != 1)
            printf("Yes\n");
        else
            printf("No\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}


